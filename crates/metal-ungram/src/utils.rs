// SPDX-License-Identifier: MIT

use proc_macro2::TokenStream;
use quote::quote;

const LICENSE_PREAMBLE: &str = "// SPDX-License-Identifier: MIT\n\n";

/// Creates a [syn::Ident] from a [String].
pub fn call_site_ident(ident: impl AsRef<str>) -> syn::Ident {
    syn::Ident::new(ident.as_ref(), proc_macro2::Span::call_site())
}

pub fn save_generated(tokens: TokenStream, to: &str) -> Result<(), crate::Error> {
    let tokens = quote! {
        //! This file is @generated by the build script, do not edit by hand.

        #tokens
    }
    .to_string();

    let parsed = syn::parse_file(&tokens)?;
    let mut formatted = format!("{}{}", LICENSE_PREAMBLE, prettyplease::unparse(&parsed));

    // FIXME: somehow, this is the (second after prettyplease getting fixed) cleanest solution to #147
    if to == super::SYNTAX_KIND {
        formatted = formatted.replace(" }, [", " },\n    [");
        formatted = formatted.replace(
            "] => { $crate\n    ::SyntaxKind::",
            "] => { $crate ::SyntaxKind::",
        );
        formatted = formatted.replace(
            "] =>\n    { $crate ::SyntaxKind::",
            "] => { $crate ::SyntaxKind::",
        );
        formatted = formatted.replace(
            "]\n    => { $crate ::SyntaxKind::",
            "] => { $crate ::SyntaxKind::",
        );
        formatted = formatted.replace(
            "] => {\n    $crate ::SyntaxKind::",
            "] => { $crate ::SyntaxKind::",
        );
        formatted = formatted.replace("\n    },\n    [", " },\n    [");
        formatted = formatted.replace("    [@ ", "    [@");
        formatted = formatted.replace("$crate ::", "$crate::");
        formatted = formatted.replace("\n    },", " },");
    }

    std::fs::write(to, formatted)?;

    Ok(())
}
