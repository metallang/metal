// SPDX-License-Identifier: MIT

// Some docs:
// - Optionals are effectively ignored (but that doesn't mean you shouldn't add them)
// 
// - Don't forget to tweak metal_ungram::grammar_item::grammar_item_name and
//   metal_parser::expr::merge_op_tokens when adding tokens comprised of symbols
// 
// - Don't forget to tweak metal_lexer::Lexer::ident_token when adding new tokens comprised
//   of ident-like characters
// 
// - The generator is very simplistic, and does not support most kinds of "nested rules".
//   For example, you can't do `Abc = A B C*`, but you can do `Abc = A B C_repeated` plus
//   `C_repeated = C*`. The generator should provide good (enough) error messages when you
//   try doing something it doesn't support.
//
// Also, if you use the ungrammar language server, make sure to disable auto-formatting.

Root = BlockStmts

// Blocks
Block = '{' stmts:BlockStmts '}'
BlockStmts = Stmt*

// Common (shared) constructs
Name = '@ident'
Visibility = 'pub'?
Mutability = 'mut'?
ExprSpecifier = '=' Expr
TypeQualifier = ':' Type
TypeSpecifier = '=' Type

// Items

Stmt = kind:StmtKind ';'?

StmtKind = Item | Expr

// don't forget to update SyntaxKind::is_item_start when changing these
Item = anns:Annotations? vis:Visibility? kind:ItemKind
// don't forget to update SyntaxKind::is_item_start when changing this
ItemKind =
  AbstractItem
  | ConstItem
  | EnumItem
  | FnItem
  | ImportItem
  | StructItem
  | TypeAliasItem

Annotations = Annotation*
Annotation = '@' Expr

AbstractItem = 'abstract' Name generics:GenericParamList? '{' body:AbstractBody '}'
AbstractBody = item:(AbstractFnItem*)
AbstractFnItem = 'def' Name sig:FnSignature ';'

ConstItem = 'const' Name ty:TypeQualifier? value:ExprSpecifier

EnumItem = 'enum' Name generics:GenericParamList? '{' body:EnumBody '}'
EnumBody = item:(EnumBodyItem*)
EnumBodyItem = EnumVariant | EnumFn
EnumVariant = Name data_ty:EnumVariantDataType? ';'
EnumVariantDataType = ('(' Type ')')
EnumFn = vis:Visibility FnItem

FnItem = 'def' Name generics:GenericParamList? sig:FnSignature body:Block
FnSignature = '(' inputs:FnInputs? ')' return_ty:TypeQualifier?
FnInputs = FnInput (',' FnInput)* ','?
FnInput = mutness:Mutability Name ty:TypeQualifier? default:ExprSpecifier?

ImportItem = 'import' tree:ImportTree
ImportTree = ImportLeaf | ImportBranch
ImportLeaf = segment:Name rest:ImportSegment?
ImportSegment = '.' subtree:ImportTree
ImportBranch = '{' subtrees:ImportBranchSubtrees? '}'
ImportBranchSubtrees = ImportTree (',' ImportTree)* ','?

StructItem = 'struct' Name generics:GenericParamList? '{' body:StructBody '}'
StructBody = item:(StructBodyItem*)
StructBodyItem = StructField | StructFn
StructField = vis:Visibility Name ty:TypeQualifier default:ExprSpecifier? ';'
StructFn = vis:Visibility FnItem

TypeAliasItem = 'type' Name generics:GenericParamList? '=' Type

// Type expressions

Type =
  NameType
  | RefType
  | BinaryType

NameType = Name generics:GenericArgList?

RefType = '&' mutness:Mutability Type

BinaryType = lhs:Type op:BinaryTypeOp rhs:Type

BinaryTypeOp = '+'

// Value expressions

// don't forget to update SyntaxKind::is_expr_start when changing this
Expr =
  Name
  | Block
  | PrefixExpr
  | BinaryExpr
  | CallExpr
  | LitExpr
  | ParenExpr
  | ReturnExpr
  | IfExpr
  | DeferExpr
  | StructExpr
  | LetExpr

PrefixExpr = op:PrefixExprOp Expr

// don't forget to update SyntaxKind::is_prefix_op when changing this
PrefixExprOp = '+' | '-' | '!' | '~' | '*'

BinaryExpr = lhs:Expr op:BinaryExprOp rhs:Expr

BinaryExprOp =
  // assignment
  '='
  | '+='
  | '-='
  | '/='
  | '*='
  | '**='
  | '%='
  | '^='
  | '&='
  | '|='
  | '<<='
  | '>>='
    // math
  | '+'
  | '-'
  | '/'
  | '*'
  | '**'
  | '%'
    // logic
  | '&&'
  | '||'
  | '=='
  | '!='
    // comparison
  | '>'
  | '>='
  | '<'
  | '<='
    // bitwise
  | '^'
  | '&'
  | '|'
  | '<<'
  | '>>'
    // range
  | '..'
    // special
  | '.' // member access

CallExpr = callee:Expr '(' args:CallExprArgs? ')'
CallExprArgs = Expr (',' Expr)* ','?

// no @bool, `true` and `false` are regular Name (identifier/variable) values
LitExpr = '@number' | '@string'

ParenExpr = '(' Expr ')'

ReturnExpr = 'return' Expr?

IfExpr = 'if' cond:Expr if_branch:Expr else_clause:IfExprElseClause?
IfExprElseClause = 'else' else_branch:Expr

DeferExpr = 'defer' Expr

StructExpr = struct_name:Expr '{' fields:StructExprFields '}'
StructExprFields = StructExprField (';' StructExprField)* ';'?
StructExprField = Name value:ExprSpecifier?

LetExpr = 'let' Name ty:TypeQualifier? value:ExprSpecifier

// Generics

GenericArgList = '[' generics:GenericArgs ']'
GenericArgs = Type (',' Type)* ','?

GenericParamList = '[' GenericParams? ']'
GenericParams = GenericParam (',' GenericParam)* ','?
GenericParam = Name bound:TypeQualifier? default:TypeSpecifier?
