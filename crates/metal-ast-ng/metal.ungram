// SPDX-License-Identifier: MIT

// Some docs:
// - Optionals are effectively ignored (but that doesn't mean you shouldn't add them)
// - Don't forget to tweak metal_ast_ungram::grammar_item::grammar_item_name when adding
//   tokens comprised of symbols
// - The generator is very simplistic, and does not support most kinds of "nested rules".
//   For example, you can't do `Abc = A B C*`, but you can do `Abc = A B C_repeated` plus
//   `C_repeated = C*`. The generator should provide good (enough) error messages when you
//   try doing something it doesn't support.
//
// Also, if you use the ungrammar language server, make sure to disable auto-formatting.

// Blocks
Block = '{' items:BlockItems '}'
BlockItems = Item*

// Common (shared) constructs
Name = '@ident'
Visibility = 'pub'?
Mutability = 'mut'?
ExprSpecifier = '=' Expr
TypeQualifier = ':' Type

// Items

Item =
  AbstractItem
  | ConstItem
  | EnumItem
  | Expr
  | FnItem
  | ImportItem
  | ReturnItem
  | StructItem
  | TypeAliasItem

AbstractItem = vis:Visibility 'abstract' Name '{' body:AbstractBody '}'
AbstractBody = AbstractFnItem*
AbstractFnItem = 'def' Name sig:FnSignature ';'

ConstItem = vis:Visibility 'const' Name ty:TypeQualifier? value:ExprSpecifier ';'

EnumItem = vis:Visibility 'enum' Name '{' body:EnumBody '}'
EnumBody = items:(EnumBodyItem*)
EnumBodyItem = EnumVariant | FnItem
EnumVariant = Name data_ty:EnumVariantDataType?
EnumVariantDataType = ('(' Type ')')

FnItem = vis:Visibility 'def' Name sig:FnSignature body:Block
FnSignature = '(' inputs:FnInputs? ')' return_ty:TypeQualifier?
FnInputs = FnInput (',' FnInput)* ','?
FnInput = mutness:Mutability Name ty:TypeQualifier? default:ExprSpecifier?

ImportItem = vis:Visibility 'import' tree:ImportTree ';'
ImportTree = ImportLeaf | ImportSegment | ImportBranch
ImportLeaf = Name
ImportSegment = segment:Name '.' rest:ImportTree
ImportBranch = '{' subtrees:ImportBranchSubtrees? '}'
ImportBranchSubtrees = ImportTree (',' ImportTree)* ','?

ReturnItem = 'return' Expr? ';'

StructItem = vis:Visibility 'struct' Name '{' body:StructBody '}'
StructBody = items:(StructBodyItem*)
StructBodyItem = StructField | FnItem
StructField = vis:Visibility Name ty:TypeQualifier ';'

TypeAliasItem = vis:Visibility 'type' Name '=' Type ';'

// Type expressions

Type =
  NameType
  | RefType
  | BinaryType

NameType = Name generics:NameTypeMaybeGenerics?
NameTypeMaybeGenerics = '[' generics:NameTypeGenerics ']'
NameTypeGenerics = Type*

RefType = '&' mutness:Mutability Type

BinaryType = lhs:Type op:BinaryTypeOp rhs:Type

BinaryTypeOp = '+'

// Value expressions

Expr =
  Name
  | PrefixExpr
  | BinaryExpr
  | CallExpr
  | LitExpr

PrefixExpr = op:PrefixExprOp Expr

PrefixExprOp = '+' | '-' | '!' | '~'

BinaryExpr = lhs:Expr op:BinaryExprOp rhs:Expr

BinaryExprOp =
  // assignment
  '='
  | '+='
  | '-='
  | '/='
  | '*='
  | '**='
  | '%='
  | '^='
  | '&='
  | '|='
  | '<<='
  | '>>='
    // math
  | '+'
  | '-'
  | '/'
  | '*'
  | '**'
  | '%'
    // logic
  | '&&'
  | '||'
  | '=='
  | '!='
    // comparison
  | '>'
  | '>='
  | '<'
  | '<='
    // bitwise
  | '^'
  | '&'
  | '|'
  | '<<'
  | '>>'
    // range
  | '..'
    // special
  | '.'

CallExpr = callee:Expr '(' args:CallExprArgs? ')'
CallExprArgs = Expr (',' Expr)* ','?

// no BoolLit, `true` and `false` are regular Name (identifier/variable) values
LitExpr = NumLit | StrLit

NumLit = '@number'
StrLit = '@string'
